#include <avr/io.h>
#include <avr/interrupt.h>

// Look up tables with 200 entries each, normalised to have max value of 1600 which is the period of the PWM loaded into registers ICR1, ICR3, ICR4.
int phaseA[] = {0, 50, 100, 151, 201, 250, 300, 349, 398, 446, 494, 542, 589, 635, 681, 726, 771, 814, 857, 899, 940, 981, 1020, 1058, 1095, 1131, 1166, 1200, 1233, 1264, 1294, 1323, 1351, 1377, 1402, 1426, 1448, 1468, 1488, 1505, 1522, 1536, 1550, 1561, 1572, 1580, 1587, 1593, 1597, 1599, 1600, 1599, 1597, 1593, 1587, 1580, 1572, 1561, 1550, 1536, 1522, 1505, 1488, 1468, 1448, 1426, 1402, 1377, 1351, 1323, 1294, 1264, 1233, 1200, 1166, 1131, 1095, 1058, 1020, 981, 940, 899, 857, 814, 771, 726, 681, 635, 589, 542, 494, 446, 398, 349, 300, 250, 201, 151, 100, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
int phaseANeg[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 100, 151, 201, 250, 300, 349, 398, 446, 494, 542, 589, 635, 681, 726, 771, 814, 857, 899, 940, 981, 1020, 1058, 1095, 1131, 1166, 1200, 1233, 1264, 1294, 1323, 1351, 1377, 1402, 1426, 1448, 1468, 1488, 1505, 1522, 1536, 1550, 1561, 1572, 1580, 1587, 1593, 1597, 1599, 1600, 1599, 1597, 1593, 1587, 1580, 1572, 1561, 1550, 1536, 1522, 1505, 1488, 1468, 1448, 1426, 1402, 1377, 1351, 1323, 1294, 1264, 1233, 1200, 1166, 1131, 1095, 1058, 1020, 981, 940, 899, 857, 814, 771, 726, 681, 635, 589, 542, 494, 446, 398, 349, 300, 250, 201, 151, 100, 50};
int phaseB[] = {1386, 1360, 1333, 1304, 1274, 1243, 1211, 1178, 1143, 1107, 1071, 1033, 994, 954, 913, 871, 829, 785, 741, 696, 651, 605, 558, 510, 462, 414, 365, 316, 267, 217, 167, 117, 67, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 84, 134, 184, 234, 283, 333, 382, 430, 478, 526, 573, 620, 666, 711, 756, 800, 843, 885, 927, 967, 1007, 1045, 1083, 1119, 1155, 1189, 1222, 1254, 1285, 1314, 1342, 1369, 1394, 1418, 1441, 1462, 1481, 1500, 1516, 1532, 1545, 1558, 1568, 1578, 1585, 1591, 1596, 1599, 1600, 1600, 1598, 1594, 1589, 1583, 1575, 1565, 1554, 1541, 1527, 1511, 1494, 1475, 1455, 1433, 1410};
int phaseBNeg[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 84, 134, 184, 234, 283, 333, 382, 430, 478, 526, 573, 620, 666, 711, 756, 800, 843, 885, 927, 967, 1007, 1045, 1083, 1119, 1155, 1189, 1222, 1254, 1285, 1314, 1342, 1369, 1394, 1418, 1441, 1462, 1481, 1500, 1516, 1532, 1545, 1558, 1568, 1578, 1585, 1591, 1596, 1599, 1600, 1600, 1598, 1594, 1589, 1583, 1575, 1565, 1554, 1541, 1527, 1511, 1494, 1475, 1455, 1433, 1410, 1386, 1360, 1333, 1304, 1274, 1243, 1211, 1178, 1143, 1107, 1071, 1033, 994, 954, 913, 871, 829, 785, 741, 696, 651, 605, 558, 510, 462, 414, 365, 316, 267, 217, 167, 117, 67, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
int phaseC[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 67, 117, 167, 217, 267, 316, 365, 414, 462, 510, 558, 605, 651, 696, 741, 785, 829, 871, 913, 954, 994, 1033, 1071, 1107, 1143, 1178, 1211, 1243, 1274, 1304, 1333, 1360, 1386, 1410, 1433, 1455, 1475, 1494, 1511, 1527, 1541, 1554, 1565, 1575, 1583, 1589, 1594, 1598, 1600, 1600, 1599, 1596, 1591, 1585, 1578, 1568, 1558, 1545, 1532, 1516, 1500, 1481, 1462, 1441, 1418, 1394, 1369, 1342, 1314, 1285, 1254, 1222, 1189, 1155, 1119, 1083, 1045, 1007, 967, 927, 885, 843, 800, 756, 711, 666, 620, 573, 526, 478, 430, 382, 333, 283, 234, 184, 134, 84, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
int phaseCNeg[] = {1386, 1410, 1433, 1455, 1475, 1494, 1511, 1527, 1541, 1554, 1565, 1575, 1583, 1589, 1594, 1598, 1600, 1600, 1599, 1596, 1591, 1585, 1578, 1568, 1558, 1545, 1532, 1516, 1500, 1481, 1462, 1441, 1418, 1394, 1369, 1342, 1314, 1285, 1254, 1222, 1189, 1155, 1119, 1083, 1045, 1007, 967, 927, 885, 843, 800, 756, 711, 666, 620, 573, 526, 478, 430, 382, 333, 283, 234, 184, 134, 84, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 67, 117, 167, 217, 267, 316, 365, 414, 462, 510, 558, 605, 651, 696, 741, 785, 829, 871, 913, 954, 994, 1033, 1071, 1107, 1143, 1178, 1211, 1243, 1274, 1304, 1333, 1360};

void setup()
{
    // Register initilisation, see datasheet for more detail.
    TCCR3A = 0b10100010;
    TCCR3B = 0b00011001;
    TIMSK3 = 0b00000001;
    ICR3 = 1600;
    TCCR4A = 0b10100010;
    TCCR4B = 0b00011001;
    TIMSK4 = 0b00000001;
    ICR4 = 1600;
    TCCR1A = 0b10100010;
    TCCR1B = 0b00011001;
    TIMSK1 = 0b00000001;
    ICR1 = 1600;
    sei();

    pinMode(5, OUTPUT);
    pinMode(2, OUTPUT);
    pinMode(6, OUTPUT);
    pinMode(7, OUTPUT);
    pinMode(11, OUTPUT);
    pinMode(12, OUTPUT);
}

void loop() { ; }

ISR(TIMER3_OVF_vect)
{
    static int num3;
    // change duty-cycle every period.
    OCR3A = phaseA[num3];
    OCR3B = phaseANeg[num3];

    if (++num3 >= 200)
    {             // Pre-increment num then check it's below 200.
        num3 = 0; // Reset num.
    }
}
ISR(TIMER4_OVF_vect)
{
    static int num4;
    // change duty-cycle every period.
    OCR4A = phaseB[num4];
    OCR4B = phaseBNeg[num4];

    if (++num4 >= 200)
    {             // Pre-increment num then check it's below 200.
        num4 = 0; // Reset num.
    }
}
ISR(TIMER1_OVF_vect)
{
    static int num1;
    // change duty-cycle every period.
    OCR1A = phaseC[num1];
    OCR1B = phaseCNeg[num1];

    if (++num1 >= 200)
    {             // Pre-increment num then check it's below 200.
        num1 = 0; // Reset num.
    }
}